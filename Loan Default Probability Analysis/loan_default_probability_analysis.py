# -*- coding: utf-8 -*-
"""Loan Default Probability analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gncNVk7WeHeb7RSHb6PARBMx2fstjm81
"""

import pandas as pd # Library for accessing and manipulating our DataFrame
import numpy as np
import matplotlib.pyplot as plt # Library for displaying our data in chart forms
import seaborn as sns # Library for displaying our data in chart forms
from sklearn.model_selection import train_test_split # Library for training and testing the data
from sklearn.linear_model import LogisticRegression # Library for conducting algorithms for identifying binary classification problems which in this case is loan defaulting
from sklearn.preprocessing import MinMaxScaler # Library for preprocessing the data before Feature Selection
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report #Library for assessing the performance of our model
import statsmodels.api as sm

"""# Retrieving and Accessing the Main DataFrame"""

df = pd.read_csv('credit.csv')
df.tail()

df.shape

df.dtypes

"""# Data Cleaning the Main DataFrame"""

df.isna().sum()

df.describe()

"""EDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)
MARRIAGE: Marital status (1=married, 2=single, 3=others)

Therefore 0 as a minimum value is not valid.
"""

cols = ['MARRIAGE', 'EDUCATION']
# Replace 0 with NaN first (so the imputer treats them as missing)
df[cols] = df[cols].replace(0, np.nan)

df.isna().sum()

df.dropna(inplace=True)

df.isna().sum()

df.shape

"""# Splitting The DataFrame into different Timeframes

# September 2005
"""

Sept_df = df.drop(columns=['PAY_2', 'PAY_3', 'PAY_4', 'PAY_5','PAY_6', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6'])
Sept_df.head()

Sept_df.shape

Sept_df.describe()

Sept_x = Sept_df.drop(columns=['default'])
Sept_y = Sept_df['default']

Sept_x.head()

Sept_x.describe()

Sept_y.head()

Sept_y.shape

"""## September 2005 - Preprocessing"""

Sept_preprocessed_x = MinMaxScaler().fit_transform(Sept_x)
Sept_preprocessed_df = pd.DataFrame(Sept_preprocessed_x, columns=Sept_x.columns)
Sept_preprocessed_df.head()

Sept_preprocessed_df.describe()

"""## September 2005 - Model Building"""

X_train, X_test, y_train, y_test = train_test_split(Sept_preprocessed_x, Sept_y, test_size=0.7, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)

Sept_preprocessed_x = sm.add_constant(Sept_preprocessed_x)
diag_model = sm.Logit(Sept_y, Sept_preprocessed_x).fit()

print(diag_model.summary())

"""PAY_1 (x6) is the biggest driver of risk (coef ~ +6.99):
Worse recent repayment status ⇒ much higher odds of default. This is classic.

PAY_AMT1 (x8) is the biggest protective factor (coef ~ –10.50):
Paying more in September drastically reduces odds of default.

LIMIT_BAL (x1) protective:
Higher credit limits associate with lower default odds (perhaps higher capacity/creditworthiness).

BILL_AMT1 (x7) protective:
Slightly counter-intuitive at first glance; often, once you account for PAY_1 and PAY_AMT1, the remaining partial effect of bill size may flip negative (e.g., high spenders who also repay are safer). Don’t over-interpret a single sign—look at the whole set.

AGE (x5) positive:
In your fit, increasing age slightly raises odds of default after controlling for others. This can vary by sample; don’t assume it’s universal.

SEX, EDUCATION, MARRIAGE have smaller (but significant) effects.
"""

